@code{
numericMapping = [
  "byte":"byte",
  "java.lang.Byte":"byte",
  "short":"short",
  "java.lang.Short":"short",
  "int":"int",
  "java.lang.Integer":"int",
  "long":"long",
  "java.lang.Long":"long",
  "float":"float",
  "java.lang.Float":"float",
  "double":"double",
  "java.lang.Double":"double"
]
}
/*\n
* Copyright 2014 Red Hat, Inc.\n
*\n
* Red Hat licenses this file to you under the Apache License, version 2.0\n
* (the "License"); you may not use this file except in compliance with the\n
* License. You may obtain a copy of the License at:\n
*\n
* http://www.apache.org/licenses/LICENSE-2.0\n
*\n
* Unless required by applicable law or agreed to in writing, software\n
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n
* License for the specific language governing permissions and limitations\n
* under the License.\n
*/\n\n
package @{ifacePackageName};\n
\n
import @{ifaceFQCN};\n
import com.bigpanda.commons.services.proxy.ServiceContextHolder;\n
import io.vertx.core.Vertx;\n
import io.vertx.core.eventbus.Message;\n
import io.vertx.core.json.JsonObject;\n
@foreach{importedType:importedTypes}
	@if{!importedType.packageName.equals("java.lang")}
		import @{importedType};\n
	@end{}
@end{}
\n
/*\n
  Generated Proxy code - DO NOT EDIT\n
  @author Roger the Robot\n
*/\n
@SuppressWarnings({"unchecked", "rawtypes"})\n
public class @{ifaceSimpleName}ContextAwareVertxProxyHandler extends @{ifaceSimpleName}VertxProxyHandler {\n
\n
  public @{ifaceSimpleName}ContextAwareVertxProxyHandler(Vertx vertx, @{ifaceSimpleName}ContextAware service) {\n
    super(vertx, (@{ifaceSimpleName}) service, DEFAULT_CONNECTION_TIMEOUT);\n
  }\n
\n
  public @{ifaceSimpleName}ContextAwareVertxProxyHandler(Vertx vertx, @{ifaceSimpleName}ContextAware service, long timeoutInSecond) {\n
    super(vertx, (@{ifaceSimpleName}) service, true, timeoutInSecond);\n
  }\n
\n
  public @{ifaceSimpleName}ContextAwareVertxProxyHandler(Vertx vertx, @{ifaceSimpleName}ContextAware service, boolean topLevel, long timeoutSeconds) {\n
    super(vertx, (@{ifaceSimpleName}) service, topLevel, timeoutSeconds);\n
  }\n
\n
  @Override\n
  public void handle(Message<JsonObject> event) {\n
    String context = event.headers().get("context");\n
    if (context != null) {\n
      ServiceContextHolder.create(context);\n
    }\n
    super.handle(event);\n
    ServiceContextHolder.clean();\n
  }\n
\n
}

